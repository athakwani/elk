{
  ports:
  [
    "80:80",
    "5044:5044"
  ],
  volumes:
  [
    "/var/log:/var/log"
  ],
  dependencies: 
  [
    {
      name: "linux-dependencies",
      cmd:
      '''
        apt-get install -y software-properties-common python-software-properties
        add-apt-repository -y ppa:webupd8team/java
        apt-get update -y
        echo debconf shared/accepted-oracle-license-v1-1 select true | debconf-set-selections
        echo debconf shared/accepted-oracle-license-v1-1 seen true | debconf-set-selections
        apt-get -y install oracle-java8-installer openssl unzip curl wget apt-transport-https gettext vim daemon
      '''
    },
    {
      name: "elk",
      cmd:
      '''
        echo 'deb http://packages.elastic.co/logstash/2.2/debian stable main' | tee /etc/apt/sources.list.d/logstash-2.2.x.list
        echo "deb http://packages.elastic.co/elasticsearch/2.x/debian stable main" | tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list
        echo "deb http://packages.elastic.co/kibana/4.4/debian stable main" | tee -a /etc/apt/sources.list.d/kibana-4.4.x.list
        wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
        apt-get -y update
        apt-get -y install logstash elasticsearch kibana
        mkdir -p /var/log/logstash
        sed -i.bak 's/.*server.host:.*/server.host: "localhost"/g' /opt/kibana/config/kibana.yml
        sed -i.bak 's/.*network.host:.*/network.host: localhost/g' /etc/elasticsearch/elasticsearch.yml
      '''
    },    
    {
      name: "topbeat",
      cmd:
      '''
        echo "deb https://packages.elastic.co/beats/apt stable main" | tee -a /etc/apt/sources.list.d/beats.list
        apt-get -y update
        apt-get -y install topbeat
      '''
    },
    {
      name: "nginx",
      cmd:
      '''
        apt-get install -y nginx apache2-utils
        htpasswd -b -c /etc/nginx/htpasswd.users admin kibana
        mkdir -p /var/log/nginx
      '''
    }
  ],
  commands: {
    setup-master: [{
      server:
      '''
        local _mem=$(free -m | grep Mem | awk '{print $2}')
        
        if [[ _mem -lt 2000 ]]; then
            echo -e "ELK stack requires >= 2G memory, quitting... "
            exit 1
        fi
        
        export SERVER_IP=$SERVER_IP
        echo "$SERVER_IP     elk" >> /etc/hosts

        echo -e "Configuring ELK ................. [    WORKING ]"

        # Copy Config files
        envsubst < $REPO_ROOT/openssl.cnf > /etc/ssl/openssl.cnf 
        envsubst < $REPO_ROOT/topbeat.yml > /etc/topbeat/topbeat.yml
        eval "echo \"$(<$REPO_ROOT/nginx.config)\""  > /etc/nginx/sites-available/default  
        cp $REPO_ROOT/02-beats-input.conf /etc/logstash/conf.d/
        cp $REPO_ROOT/10-syslog-filter.conf /etc/logstash/conf.d/
        cp $REPO_ROOT/30-elasticsearch-output.conf /etc/logstash/conf.d/
        cp $REPO_ROOT/nginx.pattern /opt/logstash/patterns/nginx

        echo -e "Configuring ELK ................. [       DONE ]"
        echo -e "Generating Certificates ......... [    WORKING ]"

        # Generate Certificate
        mkdir -p /etc/pki/tls/certs
        mkdir -p /etc/pki/tls/private      
        cd /etc/pki/tls
        sudo openssl req -subj '/CN=elk/' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt
        CERT="$(cat /etc/pki/tls/certs/logstash-forwarder.crt)"
        _export CERT
        echo -e "Generating Certificates ......... [       DONE ]"
        
        echo -e "Starting Elastic Search ......... [    WORKING ]"
        # Start services
        service elasticsearch start
        echo -e "Starting Elastic Search ......... [       DONE ]"

        echo -e "Starting Nginx .................. [    WORKING ]"
        service nginx start
        echo -e "Starting Nginx .................. [       DONE ]"
        
        echo -e "Starting Logstash ............... [    WORKING ]"
        # Start Logstash
        daemon -U --name="logstash" --output=logstash.out -F /var/run/logstash.pid -D $REPO_ROOT -X /opt/logstash/bin/logstash -- -f /etc/logstash/conf.d/ -l /var/log/logstash/logstash.log
        echo -e "Starting Logstash ............... [       DONE ]"
        
        echo -e "Starting Topbeat ................ [    WORKING ]"
        # Start Topbeat
        daemon --name="topbeat" --output=topbeat.out -F /var/run/topbeat.pid -D $REPO_ROOT -X /usr/bin/topbeat -- -c /etc/topbeat/topbeat.yml
        echo -e "Starting Topbeat ................ [       DONE ]"
        
        echo -e "Starting Kibana ................. [    WORKING ]"
        # Start Kibana
        daemon -U --name="kibana" --output=kibana.out -F /var/run/kibana.pid -D $REPO_ROOT -X /opt/kibana/node/bin/node --  /opt/kibana/src/cli
        echo -e "Starting Kibana ................. [       DONE ]"
        
        echo -e "Cheking all services are up ..... [    WORKING ]"
        # Check for Server start
        timeout 20 bash -c -- "while true; do wget -q --retry-connrefused \
        --waitretry=1 --read-timeout=20 --timeout=15 -t 0 --continue localhost:9200 >/dev/null 2>&1; \
        if [ $? = 0 ]; then break; fi; sleep 2s; done"

        # Report status
        _exit_code=$?   
        _export _exit_code
        if [[ $_exit_code -eq 0 ]]
        then
            echo -e "Cheking all services are up ..... [       DONE ]"
            echo -e "Configuring Kibana dashboard .... [    WORKING ]"
            # Configure Kibana
            cd $HOME
            curl -L -O https://download.elastic.co/beats/dashboards/beats-dashboards-1.1.0.zip
            unzip beats-dashboards-*.zip
            cd beats-dashboards-*
            ./load.sh
            curl -O https://raw.githubusercontent.com/elastic/topbeat/master/etc/topbeat.template.json
            curl -XPUT 'http://localhost:9200/_template/topbeat' -d@topbeat.template.json
            echo -e "Configuring Kibana dashboard .... [      DONE ]"
        else
            echo -e "Cheking all services are up ..... [    FAILED ]"
        fi

      '''
    },{
      client:
      '''
        mkdir -p $HOME/.elk
        echo "$CERT" > $HOME/.elk/logstash-forwarder.crt
        # Open browser on Mac if server started successfully.
        if [[ $_exit_code -eq 0 ]]
        then
         os="$(uname -s)"
         if [[ $os == "Darwin" ]]; then
             echo -e "Opening Browser"
             open http://$SERVER_IP:
         fi        
        fi
    
      '''
    }],
    get-cert: [{
      server:
      '''
        CERT="$(cat /etc/pki/tls/certs/logstash-forwarder.crt)"
        _export CERT      
        echo -e "Exporting Certificate"
      '''
    },{
      client:
      '''
        mkdir -p $HOME/.elk
        echo "$CERT" > $HOME/.elk/logstash-forwarder.crt    
        echo -e "Certificate saved in $HOME/.elk/logstash-forwarder.crt"
      '''
    }],    
    join: [{
      client:
      '''
        _master=""

        while [ "$#" -gt 0 ]
        do
        opt="$1"
        shift
        case "$opt" in
          *)
            if [[ -z $_master ]]
            then
              _master="$opt"
            fi
            ;;
        esac
        done          

        if [[ $_master == "" ]]; then
            echo -e "Usage:\ndupper exec -t $REPO_NAME join <master ip>"
            exit 1
        fi
        
        export _master
        CERT="$(cat $HOME/.elk/logstash-forwarder.crt)"
        _export CERT      
      '''
    },{    
      server:
      '''
        echo "$_master     elk" >> /etc/hosts
        mkdir -p /etc/pki/tls/certs/
        echo "$CERT" > /etc/pki/tls/certs/logstash-forwarder.crt
        
        # Configure topbeat
        envsubst < $REPO_ROOT/topbeat.yml > /etc/topbeat/topbeat.yml
        echo -e "Starting Topbeat ................ [    WORKING ]"
        # Start Topbeat
        daemon --name="topbeat" --output=topbeat.out -F /var/run/topbeat.pid -D $REPO_ROOT -X /usr/bin/topbeat -- -c /etc/topbeat/topbeat.yml
        echo -e "Starting Topbeat ................ [       DONE ]"
      '''
    }]
  }
}
